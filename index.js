// Generated by CoffeeScript 1.6.3
(function() {
  var Promise, connectionWrapper, mysql;

  mysql = require('mysql');

  Promise = require('bluebird');

  connectionWrapper = function(connection, poolCluster) {
    var db;
    return db = {
      query: function(sql, values) {
        var promise;
        promise = (Promise.promisify(connection.query, connection))(sql, values);
        return promise.bind(this);
      },
      begin: function(callback) {
        var self, transaction, transactionDeferred;
        self = this;
        transactionDeferred = Promise.defer();
        transaction = {};
        transaction.rollback = function() {
          this.rolledback = true;
          transactionDeferred.reject();
          return connection.rollback(function() {});
        };
        transaction.commit = function() {
          if (!this.rolledback) {
            return connection.commit((function(_this) {
              return function(err) {
                if (err) {
                  _this.rollback();
                  throw err;
                } else {
                  return transactionDeferred.resolve(true);
                }
              };
            })(this));
          }
        };
        transaction.query = function(sql, values) {
          return self.query(sql, values).bind(this)["catch"](function(err) {
            this.rollback();
            return console.log('Begin query error', err.message);
          });
        };
        connection.beginTransaction(function(err) {
          return callback.call(transaction);
        });
        return transactionDeferred.promise;
      },
      end: function() {
        return poolCluster.end();
      }
    };
  };

  module.exports = {
    config: function(config) {
      var configuration, group, _results;
      this._poolCluster = mysql.createPoolCluster({
        canRetry: true,
        removeNodeErrorCount: 2,
        defaultSelector: 'RR'
      });
      _results = [];
      for (group in config) {
        configuration = config[group];
        _results.push(this._poolCluster.add(group, configuration));
      }
      return _results;
    },
    connect: function(group) {
      var getConnection, pool, promise;
      if (group === 'slave') {
        pool = this._poolCluster.of(group.toLowerCase() + '*');
        promise = (Promise.promisify(pool.getConnection, pool))();
      } else {
        getConnection = Promise.promisify(this._poolCluster.getConnection, this._poolCluster);
        promise = getConnection(group.toLowerCase());
      }
      return promise.bind(this).then(function(connection) {
        return connectionWrapper(connection, this._poolCluster);
      });
    }
  };

}).call(this);
